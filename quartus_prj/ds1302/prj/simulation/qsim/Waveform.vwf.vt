// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2023 20:28:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	KEY_COL,
	clk,
	en,
	key1,
	key2,
	key3,
	key4,
	rst_n,
	rtc_data,
	shift,
	sampler_tx
);
input [3:0] KEY_COL;
input  clk;
input  en;
input  key1;
input  key2;
input  key3;
input  key4;
input  rst_n;
input  rtc_data;
input  shift;
output sampler_tx;

reg sample;
time current_time;
always @(KEY_COL or clk or en or key1 or key2 or key3 or key4 or rst_n or rtc_data or shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	KEY_ROW,
	beep,
	rtc_ce,
	rtc_data,
	rtc_sclk,
	seg_data,
	seg_sel,
	sampler_rx
);
input [3:0] KEY_ROW;
input  beep;
input  rtc_ce;
input  rtc_data;
input  rtc_sclk;
input [7:0] seg_data;
input [2:0] seg_sel;
input sampler_rx;

reg [3:0] KEY_ROW_expected;
reg  beep_expected;
reg  rtc_ce_expected;
reg  rtc_data_expected;
reg  rtc_sclk_expected;
reg [7:0] seg_data_expected;
reg [2:0] seg_sel_expected;

reg [3:0] KEY_ROW_prev;
reg  beep_prev;
reg  rtc_ce_prev;
reg  rtc_data_prev;
reg  rtc_sclk_prev;
reg [7:0] seg_data_prev;
reg [2:0] seg_sel_prev;

reg [3:0] KEY_ROW_expected_prev;
reg  beep_expected_prev;
reg  rtc_ce_expected_prev;
reg  rtc_data_expected_prev;
reg  rtc_sclk_expected_prev;
reg [7:0] seg_data_expected_prev;
reg [2:0] seg_sel_expected_prev;

reg [3:0] last_KEY_ROW_exp;
reg  last_beep_exp;
reg  last_rtc_ce_exp;
reg  last_rtc_data_exp;
reg  last_rtc_sclk_exp;
reg [7:0] last_seg_data_exp;
reg [2:0] last_seg_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	KEY_ROW_prev = KEY_ROW;
	beep_prev = beep;
	rtc_ce_prev = rtc_ce;
	rtc_data_prev = rtc_data;
	rtc_sclk_prev = rtc_sclk;
	seg_data_prev = seg_data;
	seg_sel_prev = seg_sel;
end

// update expected /o prevs

always @(trigger)
begin
	KEY_ROW_expected_prev = KEY_ROW_expected;
	beep_expected_prev = beep_expected;
	rtc_ce_expected_prev = rtc_ce_expected;
	rtc_data_expected_prev = rtc_data_expected;
	rtc_sclk_expected_prev = rtc_sclk_expected;
	seg_data_expected_prev = seg_data_expected;
	seg_sel_expected_prev = seg_sel_expected;
end


// expected KEY_ROW[ 3 ]
initial
begin
	KEY_ROW_expected[3] = 1'bX;
end 
// expected KEY_ROW[ 2 ]
initial
begin
	KEY_ROW_expected[2] = 1'bX;
end 
// expected KEY_ROW[ 1 ]
initial
begin
	KEY_ROW_expected[1] = 1'bX;
end 
// expected KEY_ROW[ 0 ]
initial
begin
	KEY_ROW_expected[0] = 1'bX;
end 

// expected beep
initial
begin
	beep_expected = 1'bX;
end 

// expected rtc_ce
initial
begin
	rtc_ce_expected = 1'b0;
end 

// expected rtc_sclk
always
begin
	rtc_sclk_expected = 1'b0;
	rtc_sclk_expected = #10000 1'b1;
	#10000;
end 
// expected seg_data[ 7 ]
initial
begin
	seg_data_expected[7] = 1'b1;
	seg_data_expected[7] = #10000 1'b0;
end 
// expected seg_data[ 6 ]
initial
begin
	seg_data_expected[6] = 1'b1;
	seg_data_expected[6] = #10000 1'b0;
	seg_data_expected[6] = #640000 1'b1;
end 
// expected seg_data[ 5 ]
initial
begin
	seg_data_expected[5] = 1'b1;
	seg_data_expected[5] = #10000 1'b0;
	seg_data_expected[5] = #320000 1'b1;
	seg_data_expected[5] = #320000 1'b0;
	seg_data_expected[5] = #320000 1'b1;
end 
// expected seg_data[ 4 ]
initial
begin
	seg_data_expected[4] = 1'b1;
	# 10000;
	repeat(3)
	begin
		seg_data_expected[4] = 1'b0;
		seg_data_expected[4] = #160000 1'b1;
		# 160000;
	end
	seg_data_expected[4] = 1'b0;
end 
// expected seg_data[ 3 ]
initial
begin
	seg_data_expected[3] = 1'b1;
	# 10000;
	repeat(6)
	begin
		seg_data_expected[3] = 1'b0;
		seg_data_expected[3] = #80000 1'b1;
		# 80000;
	end
	seg_data_expected[3] = 1'b0;
end 
// expected seg_data[ 2 ]
initial
begin
	seg_data_expected[2] = 1'b1;
	# 10000;
	repeat(12)
	begin
		seg_data_expected[2] = 1'b0;
		seg_data_expected[2] = #40000 1'b1;
		# 40000;
	end
	seg_data_expected[2] = 1'b0;
end 
// expected seg_data[ 1 ]
initial
begin
	seg_data_expected[1] = 1'b1;
	# 10000;
	repeat(24)
	begin
		seg_data_expected[1] = 1'b0;
		seg_data_expected[1] = #20000 1'b1;
		# 20000;
	end
	seg_data_expected[1] = 1'b0;
	seg_data_expected[1] = #20000 1'b1;
end 
// expected seg_data[ 0 ]
initial
begin
	seg_data_expected[0] = 1'b1;
	# 10000;
	repeat(49)
	begin
		seg_data_expected[0] = 1'b0;
		seg_data_expected[0] = #10000 1'b1;
		# 10000;
	end
	seg_data_expected[0] = 1'b0;
end 
// expected seg_sel[ 2 ]
initial
begin
	repeat(12)
	begin
		seg_sel_expected[2] = 1'b0;
		seg_sel_expected[2] = #40000 1'b1;
		# 40000;
	end
	seg_sel_expected[2] = 1'b0;
end 
// expected seg_sel[ 1 ]
always
begin
	seg_sel_expected[1] = 1'b0;
	seg_sel_expected[1] = #20000 1'b1;
	#20000;
end 
// expected seg_sel[ 0 ]
always
begin
	seg_sel_expected[0] = 1'b0;
	seg_sel_expected[0] = #10000 1'b1;
	#10000;
end 
// generate trigger
always @(KEY_ROW_expected or KEY_ROW or beep_expected or beep or rtc_ce_expected or rtc_ce or rtc_data_expected or rtc_data or rtc_sclk_expected or rtc_sclk or seg_data_expected or seg_data or seg_sel_expected or seg_sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected KEY_ROW = %b | expected beep = %b | expected rtc_ce = %b | expected rtc_data = %b | expected rtc_sclk = %b | expected seg_data = %b | expected seg_sel = %b | ",KEY_ROW_expected_prev,beep_expected_prev,rtc_ce_expected_prev,rtc_data_expected_prev,rtc_sclk_expected_prev,seg_data_expected_prev,seg_sel_expected_prev);
	$display("| real KEY_ROW = %b | real beep = %b | real rtc_ce = %b | real rtc_data = %b | real rtc_sclk = %b | real seg_data = %b | real seg_sel = %b | ",KEY_ROW_prev,beep_prev,rtc_ce_prev,rtc_data_prev,rtc_sclk_prev,seg_data_prev,seg_sel_prev);
`endif
	if (
		( KEY_ROW_expected_prev[0] !== 1'bx ) && ( KEY_ROW_prev[0] !== KEY_ROW_expected_prev[0] )
		&& ((KEY_ROW_expected_prev[0] !== last_KEY_ROW_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_ROW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_ROW_expected_prev);
		$display ("     Real value = %b", KEY_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_ROW_exp[0] = KEY_ROW_expected_prev[0];
	end
	if (
		( KEY_ROW_expected_prev[1] !== 1'bx ) && ( KEY_ROW_prev[1] !== KEY_ROW_expected_prev[1] )
		&& ((KEY_ROW_expected_prev[1] !== last_KEY_ROW_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_ROW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_ROW_expected_prev);
		$display ("     Real value = %b", KEY_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_ROW_exp[1] = KEY_ROW_expected_prev[1];
	end
	if (
		( KEY_ROW_expected_prev[2] !== 1'bx ) && ( KEY_ROW_prev[2] !== KEY_ROW_expected_prev[2] )
		&& ((KEY_ROW_expected_prev[2] !== last_KEY_ROW_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_ROW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_ROW_expected_prev);
		$display ("     Real value = %b", KEY_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_ROW_exp[2] = KEY_ROW_expected_prev[2];
	end
	if (
		( KEY_ROW_expected_prev[3] !== 1'bx ) && ( KEY_ROW_prev[3] !== KEY_ROW_expected_prev[3] )
		&& ((KEY_ROW_expected_prev[3] !== last_KEY_ROW_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_ROW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_ROW_expected_prev);
		$display ("     Real value = %b", KEY_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_ROW_exp[3] = KEY_ROW_expected_prev[3];
	end
	if (
		( beep_expected_prev !== 1'bx ) && ( beep_prev !== beep_expected_prev )
		&& ((beep_expected_prev !== last_beep_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port beep :: @time = %t",  $realtime);
		$display ("     Expected value = %b", beep_expected_prev);
		$display ("     Real value = %b", beep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_beep_exp = beep_expected_prev;
	end
	if (
		( rtc_ce_expected_prev !== 1'bx ) && ( rtc_ce_prev !== rtc_ce_expected_prev )
		&& ((rtc_ce_expected_prev !== last_rtc_ce_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rtc_ce :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rtc_ce_expected_prev);
		$display ("     Real value = %b", rtc_ce_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rtc_ce_exp = rtc_ce_expected_prev;
	end
	if (
		( rtc_data_expected_prev !== 1'bx ) && ( rtc_data_prev !== rtc_data_expected_prev )
		&& ((rtc_data_expected_prev !== last_rtc_data_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rtc_data :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rtc_data_expected_prev);
		$display ("     Real value = %b", rtc_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rtc_data_exp = rtc_data_expected_prev;
	end
	if (
		( rtc_sclk_expected_prev !== 1'bx ) && ( rtc_sclk_prev !== rtc_sclk_expected_prev )
		&& ((rtc_sclk_expected_prev !== last_rtc_sclk_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rtc_sclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rtc_sclk_expected_prev);
		$display ("     Real value = %b", rtc_sclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rtc_sclk_exp = rtc_sclk_expected_prev;
	end
	if (
		( seg_data_expected_prev[0] !== 1'bx ) && ( seg_data_prev[0] !== seg_data_expected_prev[0] )
		&& ((seg_data_expected_prev[0] !== last_seg_data_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[0] = seg_data_expected_prev[0];
	end
	if (
		( seg_data_expected_prev[1] !== 1'bx ) && ( seg_data_prev[1] !== seg_data_expected_prev[1] )
		&& ((seg_data_expected_prev[1] !== last_seg_data_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[1] = seg_data_expected_prev[1];
	end
	if (
		( seg_data_expected_prev[2] !== 1'bx ) && ( seg_data_prev[2] !== seg_data_expected_prev[2] )
		&& ((seg_data_expected_prev[2] !== last_seg_data_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[2] = seg_data_expected_prev[2];
	end
	if (
		( seg_data_expected_prev[3] !== 1'bx ) && ( seg_data_prev[3] !== seg_data_expected_prev[3] )
		&& ((seg_data_expected_prev[3] !== last_seg_data_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[3] = seg_data_expected_prev[3];
	end
	if (
		( seg_data_expected_prev[4] !== 1'bx ) && ( seg_data_prev[4] !== seg_data_expected_prev[4] )
		&& ((seg_data_expected_prev[4] !== last_seg_data_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[4] = seg_data_expected_prev[4];
	end
	if (
		( seg_data_expected_prev[5] !== 1'bx ) && ( seg_data_prev[5] !== seg_data_expected_prev[5] )
		&& ((seg_data_expected_prev[5] !== last_seg_data_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[5] = seg_data_expected_prev[5];
	end
	if (
		( seg_data_expected_prev[6] !== 1'bx ) && ( seg_data_prev[6] !== seg_data_expected_prev[6] )
		&& ((seg_data_expected_prev[6] !== last_seg_data_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[6] = seg_data_expected_prev[6];
	end
	if (
		( seg_data_expected_prev[7] !== 1'bx ) && ( seg_data_prev[7] !== seg_data_expected_prev[7] )
		&& ((seg_data_expected_prev[7] !== last_seg_data_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_data_expected_prev);
		$display ("     Real value = %b", seg_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_data_exp[7] = seg_data_expected_prev[7];
	end
	if (
		( seg_sel_expected_prev[0] !== 1'bx ) && ( seg_sel_prev[0] !== seg_sel_expected_prev[0] )
		&& ((seg_sel_expected_prev[0] !== last_seg_sel_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_sel_exp[0] = seg_sel_expected_prev[0];
	end
	if (
		( seg_sel_expected_prev[1] !== 1'bx ) && ( seg_sel_prev[1] !== seg_sel_expected_prev[1] )
		&& ((seg_sel_expected_prev[1] !== last_seg_sel_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_sel_exp[1] = seg_sel_expected_prev[1];
	end
	if (
		( seg_sel_expected_prev[2] !== 1'bx ) && ( seg_sel_prev[2] !== seg_sel_expected_prev[2] )
		&& ((seg_sel_expected_prev[2] !== last_seg_sel_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_sel_exp[2] = seg_sel_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] KEY_COL;
reg clk;
reg en;
reg key1;
reg key2;
reg key3;
reg key4;
reg rst_n;
reg treg_rtc_data;
reg shift;
// wires                                               
wire [3:0] KEY_ROW;
wire beep;
wire rtc_ce;
wire rtc_data;
wire rtc_sclk;
wire [7:0] seg_data;
wire [2:0] seg_sel;

wire sampler;                             

// assign statements (if any)                          
assign rtc_data = treg_rtc_data;
top i1 (
// port map - connection between master ports and signals/registers   
	.KEY_COL(KEY_COL),
	.KEY_ROW(KEY_ROW),
	.beep(beep),
	.clk(clk),
	.en(en),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.key4(key4),
	.rst_n(rst_n),
	.rtc_ce(rtc_ce),
	.rtc_data(rtc_data),
	.rtc_sclk(rtc_sclk),
	.seg_data(seg_data),
	.seg_sel(seg_sel),
	.shift(shift)
);
// KEY_COL[ 3 ]
initial
begin
	KEY_COL[3] = 1'b0;
end 
// KEY_COL[ 2 ]
initial
begin
	KEY_COL[2] = 1'b0;
end 
// KEY_COL[ 1 ]
initial
begin
	KEY_COL[1] = 1'b0;
end 
// KEY_COL[ 0 ]
initial
begin
	KEY_COL[0] = 1'b0;
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// en
initial
begin
	en = 1'b1;
end 

// key1
always
begin
	key1 = 1'b0;
	key1 = #10000 1'b1;
	#10000;
end 

// key2
initial
begin
	key2 = 1'b0;
end 

// key3
initial
begin
	key3 = 1'b0;
end 

// key4
initial
begin
	key4 = 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
end 

// rtc_data
initial
begin
	treg_rtc_data = 1'bZ;
end 

// shift
initial
begin
	shift = 1'b0;
end 

top_vlg_sample_tst tb_sample (
	.KEY_COL(KEY_COL),
	.clk(clk),
	.en(en),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.key4(key4),
	.rst_n(rst_n),
	.rtc_data(rtc_data),
	.shift(shift),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.KEY_ROW(KEY_ROW),
	.beep(beep),
	.rtc_ce(rtc_ce),
	.rtc_data(rtc_data),
	.rtc_sclk(rtc_sclk),
	.seg_data(seg_data),
	.seg_sel(seg_sel),
	.sampler_rx(sampler)
);
endmodule

